{"version":3,"sources":["webpack:///./src/components/image-box.module.scss","webpack:///./src/pages/projects/styles.module.scss","webpack:///./src/components/image-box.tsx","webpack:///./src/pages/projects/account-management.tsx"],"names":["module","exports","ImageBox","props","state","isModalOpen","toggleModal","bind","this","setState","render","src","alt","className","styles","onClick","showCaption","isOpen","toggle","centered","fade","charCode","color","React","ACPage","allProjects","data","edges","map","e","node","currentProject","project","mainImage","childImageSharp","fluid","lg","PROJECT_BODY_COLUMN","sharedStyles","getImageUrl","scope","filename","withPrefix","imageFolder","pageQuery"],"mappings":"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","file":"component---src-pages-projects-account-management-tsx-43bdcb4986cb8a8b7250.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageBox\":\"image-box-module--image-box--3n3h7\",\"modal\":\"image-box-module--modal--a--Wc\",\"imgCaption\":\"image-box-module--img-caption--1ecPQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageTitle\":\"styles-module--image-title--Zt6Pd\",\"quote\":\"styles-module--quote--1E26q\",\"sub\":\"styles-module--sub--3siEi\"};","import * as React from \"react\";\r\nimport { Modal, ModalBody, ModalFooter, Button, ModalHeader } from \"reactstrap\";\r\nimport * as styles from \"./image-box.module.scss\";\r\n\r\nexport interface ImageBoxProps {\r\n  src: string;\r\n  alt?: string;\r\n  className?: string;\r\n  showCaption?: boolean;\r\n}\r\n\r\nexport interface ImageBoxState {\r\n  isModalOpen: boolean;\r\n}\r\n\r\nexport class ImageBox extends React.Component<ImageBoxProps, ImageBoxState> {\r\n  constructor(props: ImageBoxProps) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false,\r\n    };\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n  }\r\n\r\n  public toggleModal() {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <>\r\n        <figure>\r\n          <img\r\n            src={this.props.src}\r\n            alt={this.props.alt}\r\n            className={`${styles.imageBox} ${this.props.className}`}\r\n            onClick={this.toggleModal}\r\n          />\r\n          {this.props.showCaption === false ? null : (\r\n            <figcaption className={`text-center ${styles.imgCaption}`}>\r\n              {this.props.alt}\r\n            </figcaption>\r\n          )}\r\n        </figure>\r\n        <Modal\r\n          isOpen={this.state.isModalOpen}\r\n          toggle={this.toggleModal}\r\n          centered={true}\r\n          fade={false}\r\n          className={styles.modal}\r\n        >\r\n          <ModalHeader toggle={this.toggleModal} charCode=\"X\">\r\n            {this.props.alt}\r\n          </ModalHeader>\r\n          <ModalBody className=\"text-center\">\r\n            <img\r\n              src={this.props.src}\r\n              alt={this.props.alt}\r\n              className={this.props.className}\r\n            />\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button color=\"primary\" onClick={this.toggleModal}>\r\n              Close\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { graphql, withPrefix } from \"gatsby\";\nimport * as React from \"react\";\nimport { Col, Container, Row, Table } from \"reactstrap\";\nimport { ImageBox } from \"../../components/image-box\";\nimport { ProjectLayout, PROJECT_BODY_COLUMN } from \"../../components/project-layout\";\nimport { ProjectPageProps } from \"../../models/project-page-props\";\nimport * as sharedStyles from \"./styles.module.scss\";\n\nexport default class ACPage extends React.Component<ProjectPageProps, {}> {\n  public render() {\n    return (\n      <ProjectLayout\n        allProjects={this.props.data.allProjects.edges.map(e => e.node)}\n        currentProject={this.props.data.project.edges[0].node}\n        mainImage={this.props.data.mainImage.childImageSharp.fluid}\n      >\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col lg={PROJECT_BODY_COLUMN}>\n              <h3>About The Company</h3>\n              <p>\n                PlanGrid has a primary objective to make intuitive and impactful\n                technology for people in the construction industry. Its\n                construction productivity software doesn’t only allow field\n                workers to store, view, and share blueprints, but also enables\n                stakeholders in a project to work together throughout the\n                project life cycle.\n              </p>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg={PROJECT_BODY_COLUMN}>\n              <h3>Background</h3>\n              <p>\n                Admin Console is a part of PlanGrid web products that allows IT\n                administrators to add, remove, and manage user accounts as well\n                as to purchase PlanGrid licenses for users who are involved in\n                organization projects.\n              </p>\n              <p>\n                PlanGrid offers multiple types of licenses, and each comes with\n                a different number of sheet storage limit. The licenses range\n                from basic ones that come with limited sheet storage to the most\n                expensive one that allows unlimited sheet storage.\n              </p>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg={PROJECT_BODY_COLUMN}>\n              <h3>My Roles &amp; Project Goals</h3>\n              <p>\n                The main goals of this project were to enhance the user\n                experience for the Admin Console and to introduce a new workflow\n                that allowed the IT Admins to set up organization ownership of\n                user accounts. As a designer, I designed the workflow that will\n                give IT Admins an ability to manage user accounts and redesigned\n                web interfaces using components from PlanGrid’s design system.\n              </p>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg={PROJECT_BODY_COLUMN}>\n              <h3>Problems</h3>\n              <p className={sharedStyles.quote}>\n                The current system restricts IT Admins to only purchase licenses\n                from a user log page. It also limits their capability to\n                effectively monitor license usage as they are unable to access a\n                list of projects that their users are working on.\n              </p>\n              <p>\n                The first problem occurs when IT Admins finds out they don’t\n                have enough license when trying to add new users to the\n                organization. The current process requires them to abandon their\n                current task, navigate back to the user log page, purchase\n                licenses, and repeat the process of adding new users.\n              </p>\n              <p>\n                The second problem happens when employees request for a license\n                upgrade once they run out of sheet storage. Since the IT Admins\n                have no information about projects that the employees are\n                working on, it’s challenging to know if the extra storage is\n                required for company work. It is possible that the employees use\n                company license to work on their personal or freelance projects.\n                As a result, the company has to unnecessarily pay extra to\n                upgrade licenses for these employees.\n              </p>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg={PROJECT_BODY_COLUMN}>\n              <h3>The Current Admin Console</h3>\n              <p>\n                The current version of Admin Console consists of two major\n                components: a license usage box and a table that displays a list\n                of people involving in the company projects. The IT Admins can\n                click \"add license\" button to buy more licenses and click \"new\n                users\" button to add more people to the organization.\n              </p>\n              <p>\n                From a design perspective, not every part of the Admin Console\n                is built using components from PlanGrid’s design system. For\n                example, the “more options icon” at the end of the row of user\n                log doesn’t exist in other parts of PlanGrid web app.\n              </p>\n              <Row className=\"justify-content-center\">\n                <Col lg=\"11\">\n                  <ImageBox\n                    src={this.getImageUrl(\"current-AC.jpg\")}\n                    alt=\"Current Admin Console UI\"\n                    className=\"img-fluid\"\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Row className=\"justify-content-center\">\n            <Col lg={PROJECT_BODY_COLUMN}>\n              <h3>User Flow</h3>\n              <p>\n                Workflow diagram was created to explore and identify different\n                paths that the IT Admins could perform to complete their tasks.\n              </p>\n\n              <Row className=\"justify-content-center\">\n                <Col lg=\"11\">\n                  <ImageBox\n                    src={this.getImageUrl(\"full-flow.png\")}\n                    alt=\"User flow for the new Admin Console\"\n                    className=\"img-fluid\"\n                  />\n                </Col>\n              </Row>\n              <p>\n                To make it easier to understand the process, I created a\n                simplified version of the user flow. In the diagram, IT Admins\n                can add new users or manage existing users. If they decide to\n                manage a user, they’ll send a request to manage the user\n                account. If they just want the user to work on company projects,\n                they’ll send an invitation to the user to join the organization.\n                On the other end, the user can accept or reject the request or\n                the invitation.\n              </p>\n              <Row className=\"justify-content-center\">\n                <Col lg=\"11\">\n                  <ImageBox\n                    src={this.getImageUrl(\"flow.png\")}\n                    alt=\"Simplified user flow for the new Admin Console \"\n                    className=\"img-fluid\"\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>Design Process</h3>\n              <p>\n                At the beginning of the design process, I sketched wireframes to\n                get a general idea of how components would look like in each\n                step of the user flow.\n              </p>\n              <Row className=\"justify-content-center\">\n                <Col lg=\"11\">\n                  <ImageBox\n                    src={this.getImageUrl(\"wireframes.png\")}\n                    alt=\"Hand-sketched wireframes\"\n                    className=\"img-fluid\"\n                  />\n                </Col>\n              </Row>\n              <p>\n                Since the current version of Admin Console didn’t comply with\n                PlanGrid’s design system, I designed a high fidelity prototype\n                using most components from the design system library. Some\n                designs were completely changed to minimize future design work.\n                For example, license options were listed vertically in the\n                original design. Although there is no problem with this design\n                at the moment, the list can get longer if PlanGrid offers more\n                license options in the future. Given the scenario, a new design\n                would be required to prevent the users from scrolling through an\n                endless list. Therefore, I decided to replace the original\n                design with a dropdown. This pattern works with the current list\n                of license options and will also work if additional items are\n                added to the list.\n              </p>\n              <Row className=\"justify-content-center\">\n                <Col lg=\"11\">\n                  <ImageBox\n                    src={this.getImageUrl(\"license.png\")}\n                    alt=\"Original design vs New design of the license list\"\n                    className=\"img-fluid\"\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>Usability Testing</h3>\n              <p className={sharedStyles.quote}>\n                Usability testing was run to observe how users interact with the\n                system when they don’t have enough license to add new users to\n                the organization. Information gained from usability testing\n                sessions provides meaningful insights that lead to a new design\n                that will enhance an overall user experience.\n              </p>\n\n              <p>\n                The restriction to purchase license only from the user log page\n                was one of the problems addressed at the beginning of project.\n                In the design process, I thought it would be convenient if the\n                users could purchase extra license without having to go back to\n                the user log page. As a result, I added a helper text that says\n                \"if you don’t have enough license, you’ll be able to purchase\n                more later\" with a thought that the users would read it and know\n                they can buy more license in after clicking next.\n              </p>\n              <Row className=\"justify-content-center\">\n                <Col lg=\"11\">\n                  <ImageBox\n                    src={this.getImageUrl(\"usability.png\")}\n                    alt=\"Adding helper text to notify users about in-app license purchase\"\n                    className=\"img-fluid\"\n                  />\n                </Col>\n              </Row>\n              <p>\n                However, I was not entirely sure if the helper text would be\n                effective enough. This thought led me to run a usability test\n                with an assumption that the users would read the helper text and\n                proceed to buy licenses. In the usability testing session, I\n                gave participants scenarios, asked them to perform tasks,\n                observed their interaction, and gave the rating of either easy,\n                difficult, or fail. The table below shows testing results of\n                three participants.\n              </p>\n              <Table>\n                <thead>\n                  <tr>\n                    <th>User</th>\n                    <th>Rating</th>\n                    <th>Notes</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <th scope=\"row\">1</th>\n                    <td>Fail</td>\n                    <td>\n                      User kept clicking next without even realizing that\n                      additional license were bought.\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">2</th>\n                    <td>Difficult</td>\n                    <td>\n                      User looked confused when able to select license labelled\n                      0 available. The user took a long time to complete the\n                      task.\n                    </td>\n                  </tr>\n                  <tr>\n                    <th scope=\"row\">3</th>\n                    <td>Easy</td>\n                    <td>\n                      User read the helper text carefully and completed the task\n                      in a timely manner.\n                    </td>\n                  </tr>\n                </tbody>\n              </Table>\n              <p>\n                In addition to the usability test, I also discussed with\n                participants and learned that they typically didn’t read helper\n                text as they tried to complete the task as fast as they could.\n                User 1 and User 2 commented that obvious visual cues would help\n                signify that the action required special attention.\n              </p>\n            </Col>\n          </Row>\n\n          <Row className=\"justify-content-center\">\n            <Col lg=\"10\">\n              <h3>Final Design</h3>\n              <p>\n                By combining the testing result and feedback received from the\n                user, I decided to add an additional step to display an alert\n                message regarding to license purchase.\n              </p>\n              <Row className=\"justify-content-center\">\n                <Col lg=\"11\">\n                  <ImageBox\n                    src={this.getImageUrl(\"new-design.png\")}\n                    alt=\"Adding an alert banner to notify users about insufficient licenses\"\n                    className=\"img-fluid\"\n                  />\n                </Col>\n              </Row>\n              <p>\n                I completed the final designs, which are being implemented after\n                I finished my internship at PlanGrid.\n              </p>\n              <Row className=\"justify-content-center\">\n                <Col lg=\"12\">\n                  <ImageBox\n                    src={this.getImageUrl(\"final-flow.png\")}\n                    alt=\"The final design of Admin Console\"\n                    className=\"img-fluid\"\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </ProjectLayout>\n    );\n  }\n\n  private getImageUrl(filename: string) {\n    return withPrefix(\n      `/images/${this.props.data.project.edges[0].node.imageFolder}/${filename}`\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query ACQuery($path: String!) {\n    allProjects: allProjectsJson {\n      ...ProjectFields\n    }\n    project: allProjectsJson(filter: { url: { eq: $path } }) {\n      ...ProjectFields\n    }\n    mainImage: file(relativePath: { eq: \"account-management/main.png\" }) {\n      ...MainImageSizes\n    }\n  }\n`;\n"],"sourceRoot":""}